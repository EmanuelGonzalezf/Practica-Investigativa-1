
fmod CROSSDOT-SYNTAX is
  protecting NAT .
  sorts Player Cell State Player_List Action .
  subsorts Player < Player_List < Nat .  
  --- Jugadores
  ops X O : -> Player [ctor] .
  
  --- Lista de jugadores y manipulación de esta para la regla
  op null : -> Player_List .
  op __ : Player Player_List -> Player_List [ctor assoc id: null] .
  op head : Player_List -> Player .

  var P : Player .
  var PL : Player_List .
  
  eq head(P PL) = P .
  eq head(null) = null .

  op reverse : Player_List -> Player_List .
  eq reverse(null) = null .
  eq reverse(P PL) = reverse(PL) P .

  --- Estados posibles de una casilla
  ops e x o : -> Cell [ctor] .  --- e = empty, x = ocupado por X, o = ocupado por O
  
  --- Movimiento del jugador
  op _plays_ : Player Nat -> Action [ctor] .
     
  op <_:_:_:_> : Board Player_List Player Action -> State .

  --- Un tablero es una lista de casillas
  sort Board .
  subsort Cell < Board .
  op nil : -> Board [ctor] .
  op _:_ : Cell Board -> Board [ctor assoc id: nil] .
  

endfm



mod CROSSDOT-GAME is
  protecting CROSSDOT-SYNTAX .
  protecting NAT .

  --- --- --- --- --- --- --- --- --- --- ---
  --- FUNCIONES AUXILIARES
  --- --- --- --- --- --- --- --- --- --- ---

  op _[_] : Board Nat -> Cell .
  op _[_<-_] : Board Nat Cell -> Board .
  op _asCell : Player -> Cell .
  op _turn : Player -> Player .
  op e in-board _ : Board -> Bool .
  op finished : State -> Bool . 

  vars B : Board .
  vars C C' : Cell .
  var P : Player .
  vars N Nz : Nat .
  var S : State .
  --- Acceso al tablero
  eq ((C : B)[0]) = C .
  eq ((C : B)[s(N)]) = B[N] .
  --- Actualización de una celda en el tablero
  eq ((C : B)[0 <- C']) = C' : B .
  eq ((C : B)[s(N) <- C']) = C : (B[N <- C']) .
  eq (nil[N <- C']) = nil .
  --- Conversión de jugador a celda
  eq X asCell = x .
  eq O asCell = o .
  --- Verificar si aun hay espacios vacios
  eq e in-board nil = false .
  eq e in-board (e : B) = true .
  eq e in-board (C : B) = (e in-board B) [owise] .

  --- Cambio de turno
  eq X turn = O .
  eq O turn = X .
  
  --- 

endm

mod CROSSDOT-RANDOM-GAME is
  protecting CROSSDOT-SYNTAX .
  protecting CROSSDOT-GAME .
  protecting RANDOM .
  protecting NAT .
  --- Variables auxiliares para el tablero y el jugador
  var B : Board .
  var P : Player .
  var N : Nat .
  var PL : Player_List .
  var A : Action .
  --- Ayuda a encontrar una posición vacía de forma aleatoria
  op find-empty-pos : Board Nat -> Nat .

  --- Elige un número aleatorio entre 0 y N Cambiar esto si o si
  op rand-pos : -> Nat .
  eq rand-pos = random(9) .
  
  --- Encuentra una posición vacía: si la posición aleatoria N está vacía, la devuelve.
  --- Si no, se llama a sí misma para intentar con otro número aleatorio.
  ceq find-empty-pos(B, N) = N if B[N] == e .
  eq find-empty-pos(B, N) = find-empty-pos(B, rand-pos rem 9) [owise] .

  --- REGLA DE REESCRITURA PARA JUGADAS ALEATORIAS
  --- Muy muy provisional (principalmente buscar cómo especificar la acción del siguiente jugador 
  crl [play-random] :
    < B : PL : P : P plays find_empty_pos(N) >
    => < B[find_empty_pos(N) <- (P asCell)] : reverse(PL) : head(reverse(PL)) rem 2 : A >
    if e in-board B .

endm
